#!/bin/sh

# ===========================
# config
# ===========================

GITHUB_USER="nkjmsss"
GITHUB_REPO="tex-docker"
GITHUB_URL="${GITHUB_USER}/${GITHUB_REPO}"
DIST_PATH="$(pwd)/tex"

# ===========================
# utils
# ===========================

# ---------------
# formatting
ink() {
  if [ "$#" -eq 0 -o "$#" -gt 2 ]; then
    echo "Usage: ink <color> <text>"
    echo "Colors:"
    echo "  black, white, red, green, yellow, blue, purple, cyan, gray"
    return 1
  fi

  local open="\033["
  local close="${open}0m"
  local black="0;30m"
  local red="1;31m"
  local green="1;32m"
  local yellow="1;33m"
  local blue="1;34m"
  local purple="1;35m"
  local cyan="1;36m"
  local gray="0;37m"
  local white="$close"

  local text="$1"
  local color="$close"

  if [ "$#" -eq 2 ]; then
    text="$2"
    case "$1" in
      black | red | green | yellow | blue | purple | cyan | gray | white)
      eval color="\$$1"
      ;;
    esac
  fi

  printf "${open}${color}${text}${close}"
}

e_newline() {
  printf "\n"
}

e_header() {
  printf " \033[37;1m%s\033[m\n" "$*"
}

e_error() {
  printf " \033[31m%s\033[m\n" "✖ $*" 1>&2
}

e_warning() {
  printf " \033[31m%s\033[m\n" "$*"
}

e_done() {
  printf " \033[37;1m%s\033[m...\033[32mOK\033[m\n" "✔ $*"
}

e_arrow() {
  printf " \033[37;1m%s\033[m\n" "➜ $*"
}

e_indent() {
  for ((i=0; i<${1:-4}; i++)); do
    echon " "
  done
  if [ -n "$2" ]; then
    echo "$2"
  else
    cat <&0
  fi
}

e_success() {
  printf " \033[37;1m%s\033[m%s...\033[32mOK\033[m\n" "✔ " "$*"
}

die() {
  e_error "$1" 1>&2
  exit "${2:-1}"
}

e_failure() {
  die "${1:-$FUNCNAME}"
}

# ---------------
# logging
logging() {
  if [ "$#" -eq 0 -o "$#" -gt 2 ]; then
    echo "Usage: ink <fmt> <msg>"
    echo "Formatting Options:"
    echo "  TITLE, ERROR, WARN, INFO, SUCCESS"
    return 1
  fi

  local color=
  local text="$2"

  case "$1" in
    TITLE)
      color=yellow
      ;;
    ERROR | WARN)
      color=red
      ;;
    INFO)
      color=blue
      ;;
    SUCCESS)
      color=green
      ;;
    *)
      text="$1"
  esac

  timestamp() {
    ink gray "["
    ink purple "$(date +%H:%M:%S)"
    ink gray "] "
  }

  timestamp; ink "$color" "$text"; echo
}

log_pass() {
  logging SUCCESS "$1"
}

log_fail() {
  logging ERROR "$1" 1>&2
}

log_warn() {
  logging WARN "$1"
}

log_info() {
  logging INFO "$1"
}

log_echo() {
  logging TITLE "$1"
}

# ---------------
# is_**
is_debug() {
  if [ "$DEBUG" = 1 ]; then
    return 0
  else
    return 1
  fi
}

is_exists() {
  which "$1" >/dev/null 2>&1
  return $?
}

is_number() {
  if [ $# -eq 0 ]; then
    cat <&0
  else
    echo "$1"
  fi | grep -E '^[0-9]+$' >/dev/null 2>&1
  if [ $? -eq 0 ]; then
    return 0
  else
    return 1
  fi
}
alias is_int=is_number
alias is_num=is_number

is_empty() {
  if [ $# -eq 0 ]; then
    cat <&0
  else
    echo "$1"
  fi | grep -E "^[$_BLANK_]*$" >/dev/null 2>&1
  if [ $? -eq 0 ]; then
    return 0
  else
    return 1
  fi
}

# ===========================
# main
# ===========================

download() {
  if [ -d "$DIST_PATH" ]; then
    log_fail "$DIST_PATH: already exists"
    exit 1
  fi

  e_newline
  e_header "Downloading dotfiles..."

  if is_debug; then
    :
  else
    if is_exists "git"; then
      # --recursive equals to ...
      # git submodule init
      # git submodule update
      git clone --recursive "git@github.com:${GITHUB_URL}.git" "$DIST_PATH"

    elif is_exists "curl" || is_exists "wget"; then
      # curl or wget
      local tarball="https://github.com/${GITHUB_URL}/archive/master.tar.gz"
      if is_exists "curl"; then
        curl -L "$tarball"

      elif is_exists "wget"; then
        wget -O - "$tarball"

      fi | tar xvz
      if [ ! -d "${GITHUB_REPO}-master" ]; then
        log_fail "dotfiles-master: not found"
        exit 1
      fi
      command mv -f "${GITHUB_REPO}-master" "$DIST_PATH"

    else
      log_fail "curl or wget required"
      exit 1
    fi
  fi
  e_newline && e_done "Download"
}

cleanup() {
  e_newline
  e_header "Cleaning up the directory..."

  rm -rf "${DIST_PATH}/bin" "${DIST_PATH}/.git"
  if is_exists "git"; then
    pushd $DIST_PATH

    git init
    git add .
    git commit -m ":tada: Initial commit"

    popd
  fi

  e_newline && e_done "Clean up"
}

download
cleanup
cd $DIST_PATH
